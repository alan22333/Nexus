// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"Nuxus/configs"
	"Nuxus/internal/controller"
	"Nuxus/internal/dao"
	"Nuxus/internal/middleware"
	"Nuxus/internal/routers"
	"Nuxus/internal/service"
	"Nuxus/internal/tasks"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	config, err := configs.LoadConfig()
	if err != nil {
		return nil, err
	}
	db := dao.NewDB(config)
	userDAO := dao.NewUserDAO(db)
	client := dao.NewClient(config)
	redisClient := dao.NewRedisClient(client)
	emailService := service.NewEmailService(config)
	userService := service.NewUserService(userDAO, redisClient, emailService, config)
	accountService := service.NewAccountService(userDAO, config)
	middlewareManager := middleware.NewMiddlewareManager(config)
	userController := controller.NewUserController(userService, accountService, middlewareManager)
	postDAO := dao.NewPostDAO(db)
	tagDAO := dao.NewTagDAO(db)
	repository := dao.NewRepository(db)
	postService := service.NewPostService(postDAO, tagDAO, repository, redisClient)
	postController := controller.NewPostController(postService)
	tagService := service.NewTagService(tagDAO)
	tagController := controller.NewTagController(tagService)
	router := routers.NewRouter(userController, postController, tagController, middlewareManager)
	syncTask := tasks.NewSyncTask(postDAO, redisClient)
	app := NewApp(router, syncTask, config, middlewareManager)
	return app, nil
}

// wire.go:

type App struct {
	Router            *routers.Router
	SyncTask          *tasks.SyncTask
	Config            *configs.Config
	MiddlewareManager *middleware.MiddlewareManager
}

func NewApp(
	router *routers.Router,
	syncTask *tasks.SyncTask,
	config *configs.Config,
	middlewareManager *middleware.MiddlewareManager,
) *App {
	return &App{
		Router:            router,
		SyncTask:          syncTask,
		Config:            config,
		MiddlewareManager: middlewareManager,
	}
}

// Wire Provider Set
var ProviderSet = wire.NewSet(configs.LoadConfig, dao.NewDB, dao.NewClient, dao.NewRedisClient, dao.NewRepository, dao.NewUserDAO, dao.NewPostDAO, dao.NewTagDAO, middleware.NewMiddlewareManager, service.NewEmailService, service.NewAccountService, service.NewUserService, service.NewPostService, service.NewTagService, controller.NewUserController, controller.NewPostController, controller.NewTagController, routers.NewRouter, tasks.NewSyncTask, NewApp)
